#!/usr/bin/python3
#
# Copyright 2022 OpenHW Group
#
# SPDX-License-Identifier: Apache-2.0 WITH SHL-2.0
#
###############################################################################
# dvplan2yml:
#    Unintelligent script to convert a CSV representation of a CORE-V-VERIF
#    DVplan to yaml.  Assumes the CSV has the following format:
#
#| ReqNo | Requirement Location | Feature | Sub Feature | Feature Description | Verification Goal | PF Criteria | Test Type | Coverage Method | Link to Coverage |
#+-------+----------------------+---------+-------------+---------------------+-------------------+-------------+-----------+-----------------+------------------+
#|       |                      |         |             |                     |                   |             |           |                 |                  |

# TODO:
#      1. Remove all new-lines from cells (currently must be down by hand).
#      2. Simple lint-style check of table format.

import os
import sys
import argparse
import datetime

if (sys.version_info < (3,0,0)):
    print ('Requires python 3')
    exit(1)

parser = argparse.ArgumentParser()
parser.add_argument('--csv', help='Name of YAML build specification to find', type=str)
args = parser.parse_args()

fn    = (os.path.basename(__file__))
now   = datetime.datetime.now()
prnow = now.strftime("%Y-%m-%d %H:%M:%S")

if not args.csv:
    print('Filename required.')
    print('Usage: {} --csv filename.csv'.format(fn))
    exit (1)

ctr            = 0
excel_filename = args.csv #excel_filename = "CV32E40S_UserMode.csv"
yaml_filename  = excel_filename.replace('csv', 'yml')
DV_Plan        = {}

with open(excel_filename, "r") as excel_csv:
    for line in excel_csv:
        if ctr == 0:
            ctr+=1  # Skip the coumn header
        else:
            # save the csv as a dictionary
            ReqNo,RequirementLocation,Feature,SubFeature,FeatureDescription,VerificationGoal,PFCriteria,TestType,CoverageMethod,Link2Coverage = line.replace(' ',' ').strip().split(',')
            DV_Plan[ReqNo] = {
                              'RequirementLocation': RequirementLocation,
                              'Feature'            : Feature,
                              'SubFeature'         : SubFeature,
                              'FeatureDescription' : FeatureDescription,
                              'VerificationGoal'   : VerificationGoal,
                              'PFCriteria'         : PFCriteria,
                              'TestType'           : TestType,
                              'CoverageMethod'     : CoverageMethod,
                              'Link2Coverage'      : Link2Coverage
                             }

# Write out directionary in yaml format
with open(yaml_filename, "w+") as yf :
    yf.write(f"# Generated by {fn}\n")
    yf.write(f"# on {prnow}\n")

    for ReqNo in DV_Plan:
        for key, value in DV_Plan[ReqNo].items():
            if (key == 'RequirementLocation' and value != ''):
                yf.write(f"RequirementLocation : {value}\n")
            elif (key == 'Feature' and value != ''):
                yf.write(f"   Feature : {value}\n")
            elif (key == 'SubFeature' and value != ''):
                yf.write(f"      SubFeature : {value}\n")
            elif (key == 'FeatureDescription' and value != ''):
                yf.write(f"         FeatureDescription : {value}\n")
            elif (key == 'VerificationGoal' and value != ''):
                yf.write(f"         VerificationGoal   : {value}\n")
            elif (key == 'PFCriteria' and value != ''):
                yf.write(f"         PFCriteria         : {value}\n")
            elif (key == 'TestType' and value != ''):
                yf.write(f"         TestType           : {value}\n")
            elif (key == 'CoverageMethod' and value != ''):
                yf.write(f"         CoverageMethod     : {value}\n")
            elif (key == 'Link2Coverage' and value != ''):
                yf.write(f"         Link2Coverage      : {value}\n")
